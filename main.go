package main

import (
	"time"

	"dawnseek.com/gin-starter/core/config"
	"dawnseek.com/gin-starter/core/handlers"
	"dawnseek.com/gin-starter/core/middlewares"
	"github.com/gin-contrib/sessions"
	"github.com/gin-contrib/sessions/redis"
	ginzap "github.com/gin-contrib/zap"
	"github.com/gin-gonic/gin"
	_ "github.com/joho/godotenv/autoload"
	swaggerfiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "dawnseek.com/gin-starter/docs" // docs is generated by Swag CLI, you have to import it.
	"go.uber.org/zap"
)

// @title Gin Swagger Example API
// @version 1.0
// @description This is a Gin Starter template for API server development
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @BasePath /
// @schemes http https
func main() {
	startServer()
}

func startServer() {

	r := gin.Default()

	setupLogger(r)

	cfg := config.LoadConfig()
	config.InitAuthConfig(&cfg)

	setupSession(r, &cfg)
	setupRouter(r, &cfg)

	r.Run(cfg.ServerAddress)
}

func setupLogger(r *gin.Engine) {
	logger, _ := zap.NewProduction()

	gin.ForceConsoleColor()

	r.Use(ginzap.Ginzap(logger, time.RFC3339, true))

	r.Use(ginzap.RecoveryWithZap(logger, true))
}

func setupSession(r *gin.Engine, cfg *config.Config) {
	store, _ := redis.NewStore(10, "tcp", cfg.RedisURL, "", []byte(cfg.SessionSecret))
	r.Use(sessions.Sessions(cfg.SessionName, store))
}

func setupRouter(r *gin.Engine, cfg *config.Config) {

	r.GET("/health-check", handlers.HandleHealthCheck)

	auth := r.Group("/auth")
	{
		auth.POST("/signin", handlers.Signin)
		auth.POST("/logout", middlewares.SessionProtect, handlers.Logout)
		auth.POST("/getAccount", middlewares.SessionProtect, handlers.GetAccount)
	}

	//For Swagger
	if cfg.SwaggerEnabled {
		r.GET("/docs/*any", ginSwagger.WrapHandler(swaggerfiles.Handler))
	}
}
